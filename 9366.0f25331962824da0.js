"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[9366],{9366:e=>{e.exports="/**\n * This example demonstrates Angular way.\n * But this behaviour can be achieved via vanilla JavaScript too\n * (it just requires more code).\n */\nimport {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MaskitoDirective} from '@maskito/angular';\nimport type {MaskitoOptions} from '@maskito/core';\nimport {tuiPure} from '@taiga-ui/cdk';\nimport {TuiLabel} from '@taiga-ui/core';\nimport {TuiInputModule, TuiTextfieldControllerModule} from '@taiga-ui/legacy';\n\nimport {getMaskitoOptions} from './mask';\n\n@Component({\n    selector: 'number-mask-doc-example-7',\n    imports: [\n        FormsModule,\n        MaskitoDirective,\n        TuiInputModule,\n        TuiLabel,\n        TuiTextfieldControllerModule,\n    ],\n    template: `\n        <label tuiLabel>\n            Enable decimal zero padding by typing dot\n            <tui-input\n                [style.max-width.rem]=\"30\"\n                [tuiTextfieldLabelOutside]=\"true\"\n                [(ngModel)]=\"value\"\n            >\n                <input\n                    inputmode=\"decimal\"\n                    tuiTextfieldLegacy\n                    [maskito]=\"getMaskOptions(decimalZeroPadding)\"\n                    (beforeinput.capture)=\"handleBeforeInput($event)\"\n                />\n            </tui-input>\n        </label>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NumberMaskDocExample7 {\n    protected value = '42';\n    protected decimalZeroPadding = this.value.includes('.');\n\n    @tuiPure // Decorator for memoization\n    protected getMaskOptions(decimalZeroPadding: boolean): MaskitoOptions {\n        return getMaskitoOptions(decimalZeroPadding);\n    }\n\n    protected handleBeforeInput(event: Event): void {\n        const {inputType, target, data} = event as InputEvent;\n\n        if (inputType.includes('delete')) {\n            const element = target as HTMLInputElement;\n            const [from, to] = this.getNotEmptySelection(\n                [element.selectionStart ?? 0, element.selectionEnd ?? 0],\n                inputType.includes('Forward'),\n            );\n            const dotWasRemoved = this.value.slice(from, to).includes('.');\n\n            this.decimalZeroPadding = this.decimalZeroPadding && !dotWasRemoved;\n        } else {\n            // eslint-disable-next-line i18n/no-russian-character\n            this.decimalZeroPadding = ['.', ',', '\u0431', '\u044e'].some(\n                (sep) => data?.includes(sep) || this.value.includes(sep),\n            );\n        }\n    }\n\n    private getNotEmptySelection(\n        [from, to]: [number, number],\n        isForward: boolean,\n    ): [number, number] {\n        if (from !== to) {\n            return [from, to];\n        }\n\n        return isForward ? [from, to + 1] : [Math.max(from - 1, 0), to];\n    }\n}\n"}}]);